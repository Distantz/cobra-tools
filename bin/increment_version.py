#!/usr/bin/env python
import subprocess
import tomllib


def should_increment():
    TRACKED_FOLDERS = [
        "codegen",
        "constants",
        "generated",
        "source",
        "modules",
        "ovl_util",
        "dumps",
        "sql_commands",
        "gui",
        "plugin",
    ]
    changed = subprocess.check_output(
        ["git", "diff", "--name-only", "--cached"], text=True
    )
    for path in changed.splitlines():
        path = path.split("/")
        if path[0] in TRACKED_FOLDERS:
            return True
        elif len(path) == 1:
            if path[0].endswith(".py"):
                return True
            if path[0] == "pyproject.toml":
                return True


def main():
    if should_increment():
        # retrieve lastest commit hash and time
        last_commit = subprocess.check_output(
            ["git", "log", r"--pretty=format:%h - %cd", "-1"], text=True
        )
        commit_hash, commit_time = last_commit.split(" - ")

        # retrieve version from pyproject.toml
        with open("pyproject.toml", "rb") as fproj:
            pyproject = tomllib.load(fproj)
        version = pyproject["project"]["version"]

        # write version file used by logging
        version_file = "__version__.py"
        with open(version_file, "w") as file:
            file.writelines(
                [
                    "# this file is auto-generated by a pre-commit hook\n",
                    f'VERSION = "{version}"\n',
                    f'COMMIT_HASH = "{commit_hash}"\n',
                    f'COMMIT_TIME = "{commit_time}"\n',
                ]
            )

        # override static version of blender plugin in __init__.py
        init_file = "__init__.py"
        version_tupleformat = f"({version.replace('.', ', ')})"
        with open(init_file, "r") as file:
            lines = file.readlines()
        with open(init_file, "w") as file:
            for line in lines:
                if '"version":' in line:
                    file.write(f'    "version": {version_tupleformat},\n')
                else:
                    file.write(line)

        return subprocess.run(["git", "add", version_file, init_file]).returncode


if __name__ == "__main__":
    SystemExit(main())
